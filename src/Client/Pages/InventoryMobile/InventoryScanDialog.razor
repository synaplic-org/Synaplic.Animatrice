@using System.Globalization
<MudDialog>
    <DialogContent>
        
        <MudPaper Elevation="3" class="pa-2 mt-2" Style="border-left: solid 4px darkslategray">
            <MudNumericField Immediate="false"  Label="Quatité"   
            Clearable="true"
            T="decimal?" @bind-Value="Qte" />
            <MudTextField Immediate="false" Label="Lot"
                             Clearable="true"
                             T="string" @bind-Value="Lot" />
            <MudDatePicker @bind-Date="DatePeremption" Label="DatePeremption" Editable="true" MinDate="DateTime.Now.AddDays(-15)"
                           MaxDate="DateTime.Now.AddYears(15)"/>


           
        </MudPaper>
        @*Culture="@CultureInfo.GetCultureInfo("fr-FR")" *@
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Ajouter</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string CodeArticle { get; set; }
    [Parameter] public string Designation { get; set; }

    public decimal? Qte ;
    public string Lot;
    public DateTime? DatePeremption;

    void Submit() => MudDialog.Close(DialogResult.Ok(new List<string> { Qte.ToString(), Lot,DatePeremption.ToString() }));
    void Cancel() => MudDialog.Cancel();


    public static async Task<List<string>> GetQuantiteAsync(IDialogService dialogService, string codeArtcile, string  Designation)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(InventoryScanDialog.CodeArticle), codeArtcile);
        parameters.Add(nameof(InventoryScanDialog.Designation), Designation);

        var options = new DialogOptions { CloseButton = true, FullScreen = false, DisableBackdropClick = true };

        var dialog = dialogService.Show<InventoryScanDialog>("Scan: " + codeArtcile, parameters, options);
        var result =  await dialog.Result;

        if (result.Cancelled) return null;
        return (List<string>)result.Data;
    }
    
}